import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const requiredEnvVars = {
  'VITE_SUPABASE_URL': 'Supabase URL',
  'VITE_SUPABASE_ANON_KEY': 'Supabase Anonymous Key',
  'VITE_CLERK_PUBLISHABLE_KEY': 'Clerk Publishable Key',
  'VITE_CLERK_SECRET_KEY': 'Clerk Secret Key',
  'VITE_CLERK_WEBHOOK_SECRET': 'Clerk Webhook Secret',
};

const optionalEnvVars = {
  'VITE_STRIPE_TEST_SECRET_KEY': 'Stripe Test Secret Key',
  'VITE_STRIPE_TEST_PUBLISHABLE_KEY': 'Stripe Test Publishable Key',
  'VITE_STRIPE_TEST_WEBHOOK_SECRET': 'Stripe Test Webhook Secret',
  'VITE_STRIPE_SECRET_KEY': 'Stripe Live Secret Key',
  'VITE_STRIPE_PUBLISHABLE_KEY': 'Stripe Live Publishable Key',
  'VITE_STRIPE_PROD_WEBHOOK_SECRET': 'Stripe Live Webhook Secret',
  'PORT': 'API Port (default: 5000)',
  'CLIENT_PORT': 'Client Port (default: 5173)',
  'WEBHOOK_PORT': 'Webhook Port (default: 5001)',
};

const envFilePath = path.join(__dirname, '.env');
let envVars = {};

console.log('🔧 SubPirate Setup Utility');
console.log('=========================');

// Load existing env vars if .env exists
if (fs.existsSync(envFilePath)) {
  console.log('Found existing .env file. Loading values...');
  const envFileContent = fs.readFileSync(envFilePath, 'utf8');
  envFileContent.split('\n').forEach(line => {
    if (line.trim() && !line.startsWith('#')) {
      const [key, value] = line.split('=');
      if (key && value) {
        envVars[key.trim()] = value.trim();
      }
    }
  });
}

// Helper to prompt for a value
function promptForValue(key, description, defaultValue = '') {
  return new Promise((resolve) => {
    // Special handling for known keys with specific defaults
    if (key === 'VITE_CLERK_PUBLISHABLE_KEY' && !defaultValue) {
      defaultValue = 'pk_live_Y2xlcmsuc3VicGlyYXRlLmNvbSQ'; // Set a default Clerk key
    }
    if (key === 'VITE_CLERK_SECRET_KEY' && !defaultValue) {
      defaultValue = 'sk_live_2HMgbkEq5wXvR4zv0I0hLopf4jhIPk1Ax4Din1tcVN';
    }
    if (key === 'VITE_CLERK_WEBHOOK_SECRET' && !defaultValue) {
      defaultValue = 'whsec_45bn8EghIOmlcHRp2S6c41YjEjg3oOSH';
    }
    
    const defaultPrompt = defaultValue ? ` (default: ${defaultValue})` : '';
    rl.question(`${description}${defaultPrompt}: `, (answer) => {
      resolve(answer || defaultValue);
    });
  });
}

async function setupEnv() {
  console.log('\n📋 Checking required environment variables...');
  
  // Check required env vars
  for (const [key, description] of Object.entries(requiredEnvVars)) {
    if (!envVars[key]) {
      const value = await promptForValue(key, description);
      if (value) {
        envVars[key] = value;
      } else {
        console.log(`⚠️  Warning: ${description} (${key}) is required but was not provided.`);
      }
    } else {
      console.log(`✅ ${description} is set`);
    }
  }
  
  console.log('\n📋 Checking optional environment variables...');
  
  // Check optional env vars
  for (const [key, description] of Object.entries(optionalEnvVars)) {
    const defaultValue = key.includes('PORT') ? 
      (key === 'PORT' ? '5000' : 
       key === 'CLIENT_PORT' ? '5173' : 
       key === 'WEBHOOK_PORT' ? '5001' : '') : '';
       
    if (!envVars[key]) {
      const value = await promptForValue(key, description, defaultValue);
      if (value) {
        envVars[key] = value;
      }
    } else {
      console.log(`✅ ${description} is set`);
    }
  }
  
  // Write to .env file
  let envFileContent = '# SubPirate Environment Configuration\n';
  envFileContent += '# Generated by setup.js\n\n';
  
  // Group by sections
  envFileContent += '# Supabase Configuration\n';
  envFileContent += `VITE_SUPABASE_URL=${envVars['VITE_SUPABASE_URL'] || ''}\n`;
  envFileContent += `VITE_SUPABASE_ANON_KEY=${envVars['VITE_SUPABASE_ANON_KEY'] || ''}\n`;
  envFileContent += `SUPABASE_URL=${envVars['VITE_SUPABASE_URL'] || ''}\n`;
  envFileContent += `SUPABASE_SERVICE_ROLE_KEY=${envVars['SUPABASE_SERVICE_ROLE_KEY'] || ''}\n\n`;
  
  envFileContent += '# Clerk Authentication\n';
  envFileContent += `VITE_CLERK_PUBLISHABLE_KEY=${envVars['VITE_CLERK_PUBLISHABLE_KEY'] || ''}\n`;
  envFileContent += `VITE_CLERK_SECRET_KEY=${envVars['VITE_CLERK_SECRET_KEY'] || ''}\n`;
  envFileContent += `VITE_CLERK_WEBHOOK_SECRET=${envVars['VITE_CLERK_WEBHOOK_SECRET'] || ''}\n\n`;
  
  envFileContent += '# Stripe Configuration\n';
  envFileContent += `VITE_STRIPE_TEST_SECRET_KEY=${envVars['VITE_STRIPE_TEST_SECRET_KEY'] || ''}\n`;
  envFileContent += `VITE_STRIPE_TEST_PUBLISHABLE_KEY=${envVars['VITE_STRIPE_TEST_PUBLISHABLE_KEY'] || ''}\n`;
  envFileContent += `VITE_STRIPE_TEST_WEBHOOK_SECRET=${envVars['VITE_STRIPE_TEST_WEBHOOK_SECRET'] || ''}\n`;
  envFileContent += `VITE_STRIPE_SECRET_KEY=${envVars['VITE_STRIPE_SECRET_KEY'] || ''}\n`;
  envFileContent += `VITE_STRIPE_PUBLISHABLE_KEY=${envVars['VITE_STRIPE_PUBLISHABLE_KEY'] || ''}\n`;
  envFileContent += `VITE_STRIPE_PROD_WEBHOOK_SECRET=${envVars['VITE_STRIPE_PROD_WEBHOOK_SECRET'] || ''}\n\n`;
  
  envFileContent += '# Port Configuration\n';
  envFileContent += `PORT=${envVars['PORT'] || '5000'}\n`;
  envFileContent += `CLIENT_PORT=${envVars['CLIENT_PORT'] || '5173'}\n`;
  envFileContent += `WEBHOOK_PORT=${envVars['WEBHOOK_PORT'] || '5001'}\n\n`;
  
  envFileContent += '# API URLs\n';
  envFileContent += `VITE_API_URL=http://localhost:${envVars['PORT'] || '5000'}\n`;
  envFileContent += `VITE_CLIENT_URL=http://localhost:${envVars['CLIENT_PORT'] || '5173'}\n\n`;
  
  // Write any other env vars that might exist
  for (const [key, value] of Object.entries(envVars)) {
    if (!requiredEnvVars[key] && !optionalEnvVars[key] && 
        key !== 'SUPABASE_URL' && key !== 'SUPABASE_SERVICE_ROLE_KEY' && 
        key !== 'VITE_API_URL' && key !== 'VITE_CLIENT_URL') {
      envFileContent += `${key}=${value}\n`;
    }
  }
  
  fs.writeFileSync(envFilePath, envFileContent);
  console.log(`\n✅ Environment configuration saved to ${envFilePath}`);
  
  // Check if dependencies are installed
  console.log('\n📦 Checking dependencies...');
  try {
    if (!fs.existsSync(path.join(__dirname, 'node_modules'))) {
      console.log('Installing dependencies...');
      execSync('npm install', { stdio: 'inherit' });
    } else {
      console.log('Dependencies already installed.');
    }
  } catch (error) {
    console.error('Error installing dependencies:', error.message);
  }
  
  console.log('\n🚀 Setup complete!');
  console.log('You can now run the application with:');
  console.log('  npm run dev     - Development mode');
  console.log('  npm run build   - Build the app');
  console.log('  npm start       - Start the app');
  
  rl.close();
}

setupEnv().catch(err => {
  console.error('Setup failed:', err);
  rl.close();
}); 